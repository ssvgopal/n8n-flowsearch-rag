{
  "id": "1H8R2Hvre2Z1LuTG",
  "meta": {
    "instanceId": "",
    "templateCredsSetupCompleted": true
  },
  "name": "✈️ CO2 Emissions of Business Travels with CarbonInterface API and GPT-4o",
  "tags": [],
  "nodes": [
    {
      "id": "16cb6418-383a-409e-ac18-8ba78aba031b",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "position": [
        -320,
        415
      ],
      "parameters": {
        "simple": false,
        "filters": {},
        "options": {
          "downloadAttachments": false
        },
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "",
          "name": ""
        }
      },
      "notesInFlow": true,
      "typeVersion": 1.2
    },
    {
      "id": "5c7c052e-9a71-4867-9d05-492dac9a8b7c",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        140,
        600
      ],
      "parameters": {
        "jsonSchemaExample": "{\n  \"traveler_name\": \"Samir Saci\",\n  \"trip_purpose\": \"Sustainability Client Workshop\",\n  \"trip_id\": \"LG-TRIP-2025-0624\",\n  \"flights\": [\n    {\n      \"type\": \"departure\",\n      \"from\": \"Paris Charles de Gaulle (CDG)\",\n      \"to\": \"Toronto Pearson International (YYZ)\",\n      \"from_code\": \"CDG\",\n      \"to_code\": \"YYZ\",\n      \"date\": \"2025-06-24\",\n      \"flight_number\": \"AF356\"\n    },\n    {\n      \"type\": \"return\",\n      \"from\": \"Toronto Pearson International (YYZ)\",\n      \"to\": \"Paris Charles de Gaulle (CDG)\",\n      \"from_code\": \"YYZ\",\n      \"to_code\": \"CDG\",\n      \"date\": \"2025-06-28\",\n      \"flight_number\": \"AC880\"\n    }\n  ],\n  \"hotel_booked\": false,\n  \"ground_transport_booked\": false\n}\n"
      },
      "typeVersion": 1.2
    },
    {
      "id": "c0eeae42-d3dd-400e-8d19-1068f4ab999d",
      "name": "AI Agent Parser",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -100,
        415
      ],
      "parameters": {
        "text": "=Extract the structured trip details from the following email:\n\n{{ $json.text }}\n",
        "options": {
          "systemMessage": "=You are a travel assistant. When provided with the body of a business trip confirmation email, extract the following structured JSON object.\n\nReturn **only** a JSON object with the following fields:\n\n{\n  \"traveler_name\": string,\n  \"trip_purpose\": string,\n  \"trip_id\": string,\n  \"flights\": [\n    {\n      \"type\": \"departure\" or \"return\",\n      \"from\": string,\n      \"from_code\": string (e.g., \"CDG\"),\n      \"to\": string,\n      \"to_code\": string (e.g., \"YYZ\"),\n      \"date\": string (ISO 8601, e.g., \"2025-06-24\"),\n      \"flight_number\": string\n    }\n  ],\n  \"hotel_booked\": boolean,\n  \"ground_transport_booked\": boolean\n}\n\n- Extract the 3-letter airport codes (IATA format) from the airport names and populate `from_code` and `to_code`.\n- If hotel or ground transport is marked “Not booked,” return `false`, otherwise `true`.\n- Always include both departure and return flights as separate items in the \"flights\" array.\n- Return only the JSON object, no extra text.\n"
        },
        "promptType": "define",
        "hasOutputParser": true
      },
      "typeVersion": 1.9
    },
    {
      "id": "2a30a34e-76d2-4d89-a5f9-cf48f97f490e",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -100,
        620
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "",
          "name": ""
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "f0eb3490-4f5f-42ca-83fa-0a562a08d630",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        320,
        420
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "output.flights"
      },
      "typeVersion": 1
    },
    {
      "id": "c7bb9d8b-a972-4d53-8217-8e77c29dda81",
      "name": "Record Flights Information",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        840,
        360
      ],
      "parameters": {
        "columns": {
          "value": {
            "To": "={{ $json.to }}",
            "From": "={{ $json.from }}",
            "To Code": "={{ $json.to_code }}",
            "Trip ID": "={{ $('AI Agent Parser').item.json.output.trip_id }}_{{ $json.type }}",
            "From Code": "={{ $json.from_code }}",
            "Flight Date": "={{ $json.date }}",
            "Flight Type": "={{ $json.type }}",
            "Hotel Booked": "={{ $('AI Agent Parser').item.json.output.hotel_booked }}",
            "Trip Purpose": "={{ $('AI Agent Parser').item.json.output.trip_purpose }}",
            "Flight Number": "={{ $json.flight_number }}",
            "Traveler Name": "={{ $('AI Agent Parser').item.json.output.traveler_name }}",
            "Ground Transport Booked": "={{ $('AI Agent Parser').item.json.output.ground_transport_booked }}"
          },
          "schema": [
            {
              "id": "Traveler Name",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Traveler Name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Trip Purpose",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Trip Purpose",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Trip ID",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Trip ID",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Hotel Booked",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Hotel Booked",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Ground Transport Booked",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Ground Transport Booked",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Type",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Flight Type",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "From",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "From",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "From Code",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "From Code",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "To",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To Code",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "To Code",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Flight Date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Number",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Flight Number",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "append",
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "",
          "cachedResultName": "Flight"
        },
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1Unyl-tEDYwtrILjNLOX7IbBP-TAYy8gcmqcZahPpiEI",
          "cachedResultUrl": "",
          "cachedResultName": "Carbon Emissions"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "",
          "name": ""
        }
      },
      "notesInFlow": true,
      "typeVersion": 4.6
    },
    {
      "id": "9a3da134-6af3-4130-9420-7efbd4d47d17",
      "name": "Loop Over Flights",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        540,
        420
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3
    },
    {
      "id": "8fa6af96-da24-449f-ab07-7c26eebf82e1",
      "name": "Collect CO2 Emissions",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1040,
        360
      ],
      "parameters": {
        "url": "https://www.carboninterface.com/api/v1/estimates",
        "method": "POST",
        "options": {},
        "jsonBody": "={\n  \"type\": \"flight\",\n  \"passengers\": 1,\n  \"legs\": [\n    {\n      \"departure_airport\": \"{{ $json['From Code'] }}\",\n      \"destination_airport\": \"{{ $json['To Code'] }}\"\n    }\n  ]\n}\n",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR_API_LEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "notesInFlow": true,
      "typeVersion": 4.2
    },
    {
      "id": "0a297fa4-3ea0-485d-901e-48f8e3d32840",
      "name": "Load Results",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1300,
        420
      ],
      "parameters": {
        "columns": {
          "value": {
            "Trip ID": "={{ $('Record Flights Information').item.json['Trip ID'] }}",
            "CO2 (kg)": "={{ $json.data.attributes.carbon_kg }}",
            "Distance (km)": "={{ $json.data.attributes.distance_value }}",
            "Estimation Time": "={{ $json.data.attributes.estimated_at }}"
          },
          "schema": [
            {
              "id": "Traveler Name",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Traveler Name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Trip Purpose",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Trip Purpose",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Trip ID",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "Trip ID",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Hotel Booked",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Hotel Booked",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Ground Transport Booked",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Ground Transport Booked",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Type",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Flight Type",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "From",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "From",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "From Code",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "From Code",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "To",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "To Code",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "To Code",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Date",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Flight Date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Flight Number",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "Flight Number",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Distance (km)",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Distance (km)",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CO2 (kg)",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "CO2 (kg)",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Estimation Time",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "Estimation Time",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "Trip ID"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "appendOrUpdate",
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "",
          "cachedResultName": "Flight"
        },
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1Unyl-tEDYwtrILjNLOX7IbBP-TAYy8gcmqcZahPpiEI",
          "cachedResultUrl": "",
          "cachedResultName": "Carbon Emissions"
        }
      },
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "",
          "name": ""
        }
      },
      "notesInFlow": true,
      "typeVersion": 4.6
    },
    {
      "id": "943097a7-84b2-4be1-a65a-711a8350daad",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -360,
        -60
      ],
      "parameters": {
        "color": 7,
        "width": 180,
        "height": 820,
        "content": "### 1. Workflow Trigger with Gmail Trigger\nThe workflow is triggered by a new email received in your Gmail mailbox dedicated to process **flight schedules**.\n\n#### How to setup?\n- **Gmail Trigger Node:** set up your Gmail API credentials\n[Learn more about the Gmail Trigger Node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger)\n"
      },
      "typeVersion": 1
    },
    {
      "id": "38d4649e-87c0-4bd6-b822-b88ff68309cc",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -160,
        -60
      ],
      "parameters": {
        "color": 7,
        "width": 440,
        "height": 820,
        "content": "### 2. AI Agent to trip schedule report\nThis node will analyze the content of the email to extract information about the trip including **departure** and **return** trips with **airport codes** and booking information. \n\n#### How to setup?\n- **AI Agent with the Chat Model**:\n   1. Add a **chat model** with the required credentials *(Example: Open AI 4o-mini)*\n   2. Adapt the system prompt to the format of emails you expect to receive *(type of information included)*\n  [Learn more about the AI Agent Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n"
      },
      "typeVersion": 1
    },
    {
      "id": "01acc971-5482-4e00-846b-584660ec30ab",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        300,
        -60
      ],
      "parameters": {
        "color": 7,
        "width": 1180,
        "height": 820,
        "content": "### 3. Record Shipment Request Information and fetch distance and driving time using Open Route API\nThis starts by recording all the information parsed by the AI node. Then, we use the **Open Route API** to complete with **geocoding data** *(GPS Coordinates)* that will be used to fetch **driving distance and time**.\n\n#### How to setup?\n- **Setup Carbone Interface API Credentials**\n  1. Get your free API key: [Carbon Interface API Documentation](https://docs.carboninterface.com/#/)\n  2. Fill the API key in the HTTP request node\n- **Load records in the Google Sheet Node**:\n   1. Add your Google Sheet API credentials to access the Google Sheet file\n   2. Select the file using the list, an URL or an ID\n   3. Select the sheet in which you want to record your working sessions\n   4. Map the fields: **traveler_name**, **trip_purpose**, **trip_id**, **hotel_booked**, **ground_transport_booked**, **flight_type**, **from**, **from_code**, **to**, **to_code**, **flight_date**, **flight_number**, **distance_km**, **carbon_kg**, **estimated_at**\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n  [Learn more about the Google Sheet Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)\n\nDistance, carbon emissions and estimation time will be fetched from the **Carbone Interface API**.\n"
      },
      "typeVersion": 1
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8a89f371-efb3-4bd0-8909-8fb802f7826d",
  "connections": {
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Flights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Results": {
      "main": [
        [
          {
            "node": "Loop Over Flights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "AI Agent Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Parser": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Flights": {
      "main": [
        [],
        [
          {
            "node": "Record Flights Information",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Collect CO2 Emissions": {
      "main": [
        [
          {
            "node": "Load Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Record Flights Information": {
      "main": [
        [
          {
            "node": "Collect CO2 Emissions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}